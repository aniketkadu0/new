PropertyInfo[] props = t.GetProperties();
      Console.WriteLine("Properties (N = {0}):", 
                        props.Length);
      foreach (var prop in props)
         if (prop.GetIndexParameters().Length == 0)
            Console.WriteLine("   {0} ({1}): {2}", prop.Name,
                              prop.PropertyType.Name,
                              prop.GetValue(obj));
         else
            Console.WriteLine("   {0} ({1}): <Indexed>", prop.Name,
                              prop.PropertyType.Name);
                              
                              
static void Main()  
        {  
            // Get name of type  
            Type t = typeof(Car);  
            GetMethod(t);  
            GetMethods(t);  
  
            Console.ReadLine();  
        }  
        // Display method names of type.  
        public static void GetMethods(Type t)  
        {  
            Console.WriteLine("***** Methods *****");  
            MethodInfo[] mi = t.GetMethods();  
            foreach (MethodInfo m in mi)  
                Console.WriteLine("->{0}", m.Name);  
            Console.WriteLine("");  
        }  
        // Display method name of type.  
        public static void GetMethod(Type t)  
        {  
            Console.WriteLine("***** Method *****");  
            //This searches for name is case-sensitive.   
            //The search includes public static and public instance methods.  
            MethodInfo mi = t.GetMethod("IsMoving");  
            Console.WriteLine("->{0}", mi.Name);  
            Console.WriteLine("");  
        }  
        
        
        
        
        
        
        
        
        static void Main()  
        {  
            // Get name of type  
            Type t = typeof(Car);  
            GetParametersInfo(t);  
  
            Console.ReadLine();  
        }  
        //Display Method return Type and paralmeters list  
        public static void GetParametersInfo(Type t)  
        {  
            Console.WriteLine("***** GetParametersInfo *****");  
            MethodInfo[] mi = t.GetMethods();  
            foreach (MethodInfo m in mi)  
            {  
                // Get return value.  
                string retVal = m.ReturnType.FullName;  
                StringBuilder paramInfo = new StringBuilder();  
                paramInfo.Append("(");  
  
                // Get params.  
                foreach (ParameterInfo pi in m.GetParameters())  
                {  
                    paramInfo.Append(string.Format("{0} {1} ", pi.ParameterType, pi.Name));  
                }  
                paramInfo.Append(")");  
  
                // Now display the basic method sig.  
                Console.WriteLine("->{0} {1} {2}", retVal, m.Name, paramInfo);  
            }  
            Console.WriteLine("");  
        }  
        
        
        
        
        
        
        
        
        
        
        
        Type t = typeof(PropertyClass);
        // Get the public properties.
        PropertyInfo[] propInfos = t.GetProperties(BindingFlags.Public|BindingFlags.Instance);
        Console.WriteLine("The number of public properties: {0}.\n",
                          propInfos.Length);
        // Display the public properties.
        DisplayPropertyInfo(propInfos);

        // Get the nonpublic properties.
        PropertyInfo[] propInfos1 = t.GetProperties(BindingFlags.NonPublic|BindingFlags.Instance);
        Console.WriteLine("The number of non-public properties: {0}.\n",
                          propInfos1.Length);
        // Display all the nonpublic properties.
        DisplayPropertyInfo(propInfos1);
    }

    public static void DisplayPropertyInfo(PropertyInfo[] propInfos)
    {
        // Display information for all properties.
        foreach (var propInfo in propInfos) {
            bool readable = propInfo.CanRead;
            bool writable = propInfo.CanWrite;

            Console.WriteLine("   Property name: {0}", propInfo.Name);
            Console.WriteLine("   Property type: {0}", propInfo.PropertyType);
            Console.WriteLine("   Read-Write:    {0}", readable & writable);
            if (readable) {
               MethodInfo getAccessor = propInfo.GetMethod;
               Console.WriteLine("   Visibility:    {0}",
                                 GetVisibility(getAccessor));
            }
            if (writable) {
               MethodInfo setAccessor = propInfo.SetMethod;
               Console.WriteLine("   Visibility:    {0}",
                                 GetVisibility(setAccessor));
            }
            Console.WriteLine();
        }
    }

    public static String GetVisibility(MethodInfo accessor)
    {
       if (accessor.IsPublic)
          return "Public";
       else if (accessor.IsPrivate)
          return "Private";
       else if (accessor.IsFamily)
          return "Protected";
       else if (accessor.IsAssembly)
          return "Internal/Friend";
       else
          return "Protected Internal/Friend";
    }
