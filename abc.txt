PropertyInfo[] props = t.GetProperties();
      Console.WriteLine("Properties (N = {0}):", 
                        props.Length);
      foreach (var prop in props)
         if (prop.GetIndexParameters().Length == 0)
            Console.WriteLine("   {0} ({1}): {2}", prop.Name,
                              prop.PropertyType.Name,
                              prop.GetValue(obj));
         else
            Console.WriteLine("   {0} ({1}): <Indexed>", prop.Name,
                              prop.PropertyType.Name);
                              
                              
static void Main()  
        {  
            // Get name of type  
            Type t = typeof(Car);  
            GetMethod(t);  
            GetMethods(t);  
  
            Console.ReadLine();  
        }  
        // Display method names of type.  
        public static void GetMethods(Type t)  
        {  
            Console.WriteLine("***** Methods *****");  
            MethodInfo[] mi = t.GetMethods();  
            foreach (MethodInfo m in mi)  
                Console.WriteLine("->{0}", m.Name);  
            Console.WriteLine("");  
        }  
        // Display method name of type.  
        public static void GetMethod(Type t)  
        {  
            Console.WriteLine("***** Method *****");  
            //This searches for name is case-sensitive.   
            //The search includes public static and public instance methods.  
            MethodInfo mi = t.GetMethod("IsMoving");  
            Console.WriteLine("->{0}", mi.Name);  
            Console.WriteLine("");  
        }  
        
        
        
        
        
        
        
        
        static void Main()  
        {  
            // Get name of type  
            Type t = typeof(Car);  
            GetParametersInfo(t);  
  
            Console.ReadLine();  
        }  
        //Display Method return Type and paralmeters list  
        public static void GetParametersInfo(Type t)  
        {  
            Console.WriteLine("***** GetParametersInfo *****");  
            MethodInfo[] mi = t.GetMethods();  
            foreach (MethodInfo m in mi)  
            {  
                // Get return value.  
                string retVal = m.ReturnType.FullName;  
                StringBuilder paramInfo = new StringBuilder();  
                paramInfo.Append("(");  
  
                // Get params.  
                foreach (ParameterInfo pi in m.GetParameters())  
                {  
                    paramInfo.Append(string.Format("{0} {1} ", pi.ParameterType, pi.Name));  
                }  
                paramInfo.Append(")");  
  
                // Now display the basic method sig.  
                Console.WriteLine("->{0} {1} {2}", retVal, m.Name, paramInfo);  
            }  
            Console.WriteLine("");  
        }  
